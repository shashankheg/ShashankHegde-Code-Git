import torch
import torch.nn as nn
import torch.optim as optim

# Sample neural network
class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(10, 50)
        self.fc2 = nn.Linear(50, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        return self.fc2(x)

# Instantiate model and loss
model = SimpleNet()
loss_fn = nn.MSELoss()
data = torch.randn(64, 10)
target = torch.randn(64, 1)

# Adam Optimizer
adam_optimizer = optim.Adam(model.parameters(), lr=1e-3, weight_decay=1e-2)
adam_loss = []
for _ in range(100):
    adam_optimizer.zero_grad()
    output = model(data)
    loss = loss_fn(output, target)
    loss.backward()
    adam_optimizer.step()
    adam_loss.append(loss.item())

# AdamW Optimizer
model = SimpleNet()  # Reset model weights
adamw_optimizer = optim.AdamW(model.parameters(), lr=1e-3, weight_decay=1e-2)
adamw_loss = []
for _ in range(100):
    adamw_optimizer.zero_grad()
    output = model(data)
    loss = loss_fn(output, target)
    loss.backward()
    adamw_optimizer.step()
    adamw_loss.append(loss.item())
